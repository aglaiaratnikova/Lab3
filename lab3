import java.util.*;

public class DirectedGraph {

    // Словарь для хранения списка ребер графа
    private final Map<Integer, Set<Integer>> edgyList;

    // Конструктор инициализирует пустой граф
    public DirectedGraph() {
        this.edgyList = new HashMap<>();
    }

    // 1. Вывод графа: выводит все ребра графа
    public void showGraph() {
        for (var entry : edgyList.entrySet()) { // Проходим по всем вершинам
            int from = entry.getKey(); // Вершина-откуда
            for (int to : entry.getValue()) { // Вершины-куда
                System.out.println(from + " -> " + to); // Выводим ребра
            }
        }
    }

    // 2. Добавление ребра: добавляет направленное ребро между двумя вершинами
    public boolean addEdge(int from, int to) {
        if (from == to) return false; // Проверяем, чтобы вершина не соединялась сама с собой
        edgyList.putIfAbsent(from, new HashSet<>()); // Создаём запись для вершины, если её нет
        edgyList.putIfAbsent(to, new HashSet<>()); // Убеждаемся, что конечная вершина существует
        return edgyList.get(from).add(to); // Добавляем ребро, если его ещё нет
    }

    // 3. Вывод всех вершин: возвращает список ID всех вершин в графе
    public List<Integer> getVertices() {
        List<Integer> vertices = new ArrayList<>(edgyList.keySet()); // Получаем список вершин
        Collections.sort(vertices); // Сортируем вершины по возрастанию
        return vertices; // Возвращаем отсортированный список
    }

    // 4. Вершины с минимальным числом рёбер: возвращает вершины с количеством рёбер >= заданного
    public List<Integer> verticesWithMinEdges(int minEdges) {
        List<Integer> result = new ArrayList<>(); // Список для хранения результата
        for (var entry : edgyList.entrySet()) { // Проходим по всем вершинам
            int edgeCount = entry.getValue().size(); // Считаем количество рёбер
            if (edgeCount >= minEdges) { // Если рёбер достаточно, добавляем в результат
                result.add(entry.getKey());
            }
        }
        return result; // Возвращаем результат
    }

    // 5. Вершины с преобладанием входящих рёбер
    public List<Integer> verticesWithMoreIncomingEdges() {
        Map<Integer, Integer> incom = new HashMap<>(); // Словарь для подсчёта входящих рёбер
        edgyList.forEach((from,i) ->
        {i.forEach(to -> incom.put(to, incom.getOrDefault(to, 0) + 1)); // Увеличиваем счётчик входящих рёбер
        });

        List<Integer> result = new ArrayList<>(); // Список результата
        for (var i : edgyList.keySet()) { // Проходим по всем вершинам
            int outDegree = edgyList.get(i).size(); // Считаем исходящие рёбра
            int incomingEdges = incom.getOrDefault(i, 0); // Считаем входящие рёбра
            if (incomingEdges > outDegree) { // Если входящих больше, добавляем в результат
                result.add(i);
            }
        }
        return result; // Возвращаем результат
    }

    // 6. Перенаправление ребра: меняет направление существующего ребра
    public boolean changeDirectionEdge(int from, int to) {
        if (edgyList.containsKey(from) && edgyList.get(from).remove(to)) { // Удаляем ребро заданного направления, если существует
            addEdge(to, from); // Добавляем перевернутое ребро
            return true; // Перенаправлено
        }
        return false; // Не найдено
    }

    // 7. Удаление ребра: удаляет указанное ребро из графа
    public boolean deleteEdge(int from, int to) {
        return edgyList.containsKey(from) && edgyList.get(from).remove(to); // Удаляем, если существует
    }

    // 8. Удаление вершины: удаляет вершину и все связанные с ней рёбра
    public void deleteVertex(int i) {
        edgyList.remove(i); // Удаляем вершину
        edgyList.values().forEach(j -> j.remove(i)); // Удаляем все рёбра, ведущие к ней
    }

    // 9. Удаление вершин с минимальной разницей рёбер
    public void deleteVerticesWithMinEdgeDifference() {
        Map<Integer, Integer> incom = new HashMap<>(); // Словарь для подсчёта входящих рёбер
        edgyList.forEach((from, i) -> { // Подсчитываем входящие рёбра
            i.forEach(to -> incom.put(to, incom.getOrDefault(to, 0) + 1));
        });

        int minDifference = Integer.MAX_VALUE; // Наибольшее количество ребер из одной вершины
        List<Integer> delVertx = new ArrayList<>(); // Список вершин на удаление
        for (var vertex : edgyList.keySet()) { // Проходим по всем вершинам
            int outDegree = edgyList.get(vertex).size(); // Исходящие рёбра
            int inEdges = incom.getOrDefault(vertex, 0); // Входящие рёбра
            int diff = Math.abs(inEdges - outDegree); // Разница по модулю

            if (diff < minDifference) { // Обновляем минимальную разницу
                minDifference = diff;
                delVertx.clear(); // Удаляем вершины
                delVertx.add(vertex); // Добавляем новую вершину
            } else if (diff == minDifference) { // Если разница равна минимальной, добавляем вершину
                delVertx.add(vertex);
            }
        }

        delVertx.forEach(this::deleteVertex); // Удаляем все подходящие вершины
    }

    // 10. Вершины достижимые за 2 хода
    public Set<Integer> reachableInTwoSteps(int vertex) {
        Set<Integer> result = new HashSet<>(); // Множество результата
        if (edgyList.containsKey(vertex)) { // Если вершина существует
            for (int next : edgyList.get(vertex)) { // Для всех соседей
                result.addAll(edgyList.getOrDefault(next, Collections.emptySet())); // Добавляем соседей второго уровня
            }
        }
        return result; // Возвращаем результат
    }

    // 11. Вершины достижимые за n ходов
    public Set<Integer> reachableInNSteps(int vertex, int n) {
        Set<Integer> result = new HashSet<>(); // Множество результата
        reachableInNStepsHelper(vertex, n, result); // Вспомогательная рекурсивная функция
        return result; // Возвращаем результат
    }

    private void reachableInNStepsHelper(int vertex, int steps, Set<Integer> result) {
        if (steps == 0) return; // Если шаги закончились, выходим
        for (int next : edgyList.getOrDefault(vertex, Collections.emptySet())) { // Для всех соседей
            result.add(next); // Добавляем в результат
            reachableInNStepsHelper(next, steps - 1, result); // Рекурсивно ищем далее
        }
    }

    // 12. Сложение двух графов: объединяет текущий граф с другим
    public void plusGraph(DirectedGraph other) {
        other.edgyList.forEach((key, value) -> { // Для всех вершин и рёбер другого графа
            this.edgyList.putIfAbsent(key, new HashSet<>()); // Добавляем вершину, если её нет
            this.edgyList.get(key).addAll(value); // Добавляем рёбра
        });
    }

    // 13. Удаление повторений из массива: возвращает массив без дубликатов
    public static <T> List<T> deleteDuplicates(List<T> list) {
        return new ArrayList<>(new HashSet<>(list)); // Преобразуем в множество, чтобы убрать дубликаты, и обратно в список
    }

    // Проверка
    public static void main(String[] args) {

        DirectedGraph graphHelp = new DirectedGraph();
        graphHelp.addEdge(1, 2);
        graphHelp.addEdge(1, 3);
        graphHelp.addEdge(1, 5);

        DirectedGraph graph = new DirectedGraph();

        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(3, 4);
        graph.addEdge(4, 5);
        graph.addEdge(5, 2);
        graph.addEdge(5, 1);
        graph.addEdge(6, 5);
        graph.addEdge(7, 2);
        graph.addEdge(7, 5);
        graph.addEdge(7, 6);

        System.out.println("граф:");
        graph.showGraph();

        graph.deleteVerticesWithMinEdgeDifference();
        System.out.println("граф после удаления вершин с минимальной разницей рёбер:");

        System.out.println("вершины: " + graph.getVertices());

        System.out.println("вершины с двумя>= ребрами: " + graph.verticesWithMinEdges(2));

        System.out.println("Вершины с преобладанием входящих рёбер: " + graph.verticesWithMoreIncomingEdges());

        graph.changeDirectionEdge(1, 2);
        System.out.println("после перенаправления 1 -> 2:");
        graph.showGraph();

        graph.deleteEdge(2, 3);
        System.out.println("удаляем ребро 2 -> 3:");
        graph.showGraph();

        graph.deleteVertex(4);
        System.out.println("после удаления вершины 4:");
        graph.showGraph();

        System.out.println("Вершины достижимые за 2 хода из вершины 3:");
        graph.reachableInTwoSteps(3);

        System.out.println("Вершины достижимые за 3 хода из вершины 2:");
        graph.reachableInNSteps(2,3);

        System.out.println("Граф после сложения с graphHelper:");
        graph.plusGraph(graphHelp);
        graph.showGraph();

        List<Integer> myList = new ArrayList<>();
        myList.add(3);
        myList.add(5);
        myList.add(3);
        System.out.println(graph.deleteDuplicates(myList));

    }
}
